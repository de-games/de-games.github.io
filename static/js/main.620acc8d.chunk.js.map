{"version":3,"sources":["assets/scss/_themes-vars.module.scss","components/themes/palatte.js","components/themes/typography.js","components/themes/index.js","components/themes/compStyleOverride.js","config.js","assets/images/logo.svg","layout/MainLayout/LogoSection/index.js","layout/MainLayout/Header/SearchSection/index.js","store/actions.js","layout/MainLayout/Header/Customization/index.js","layout/MainLayout/Header/MobileSection/index.js","layout/MainLayout/Header/ProfileSection/RewardCard.js","assets/images/users/user-round.svg","layout/MainLayout/Header/ProfileSection/index.js","layout/MainLayout/Header/index.js","layout/MainLayout/Header/NotificationSection/index.js","layout/MainLayout/index.js","routes/MainRoutes.js","layout/MinimalLayout/index.js","layout/NavMotion.js","routes/LoginRoutes.js","components/ui-component/extended/Loader/Loader.js","routes/AuthenticationRoutes.js","routes/index.js","components/ui-component/extended/Snackbar/index.js","layout/NavigationScroll.js","App.js","store/customizationReducer.js","store/snackbarReducer.js","store/reducer.js","serviceWorker.js","index.js"],"names":["module","exports","themePalatte","navObject","mode","customization","navType","common","black","value","paperDark","primary","light","blue50","main","blue500","dark","blue600","200","blue200","800","blue800","secondary","deepPurple50","deepPurple500","deepPurple600","deepPurple200","deepPurple800","purple","error","red200","red500","red800","orange","deepOrange50","deepOrange200","deepOrange800","warning","amber50","amber100","amber500","success","A100","A200","A700","grey","50","grey50","100","grey100","500","textSecondary","600","textPrimary","900","textDark","text","hint","background","paper","default","backgroundDefault","themeTypography","fontFamily","h6","fontWeight","color","fontSize","h5","h4","h3","h2","h1","subtitle1","subtitle2","caption","body1","lineHeight","body2","letterSpacing","mainContent","backgroundColor","width","minHeight","flexGrow","padding","marginTop","marginRight","borderRadius","menuCaption","textTransform","subMenuCaption","commonAvatar","cursor","smallAvatar","height","mediumAvatar","largeAvatar","theme","menuSelected","menuSelectedBack","divider","grey700","grey500","grey900","grey200","createMuiTheme","direction","rtlLayout","palette","mixins","toolbar","typography","components","MuiButton","styleOverrides","root","MuiPaper","defaultProps","elevation","backgroundImage","rounded","MuiCardHeader","title","MuiCardContent","MuiCardActions","MuiAlert","alignItems","MuiButtonBase","paddingTop","paddingBottom","MuiListItemIcon","minWidth","MuiListItemText","MuiInputBase","input","MuiOutlinedInput","borderColor","grey400","inputAdornedStart","paddingLeft","notchedOutline","MuiSlider","grey300","mark","MuiAutocomplete","popper","boxShadow","MuiDivider","opacity","MuiSelect","select","MuiCheckbox","MuiSvgIcon","MuiAvatar","MuiChip","MuiTimelineContent","MuiTreeItem","label","marginBottom","MuiTimelineDot","MuiDateTimePickerTabs","tabs","MuiClock","bottom","MuiDialog","config","basename","defaultPath","i18n","LogoSection","Fragment","Link","component","RouterLink","to","src","logo","alt","makeStyles","searchControl","marginLeft","paddingRight","breakpoints","down","startAdornment","headerAvtar","colseAvtar","popperContainer","zIndex","top","cardContent","card","border","SET_MENU","MENU_OPEN","MENU_TYPE","THEME_LOCALE","THEME_RTL","SET_FONT_FAMILY","SET_BORDER_RADIUS","SNACKBAR_OPEN","menuIcon","transition","box","grow","paperContainer","rewardStyles","overflow","position","content","right","tagLine","button","RewardCard","classes","Card","className","CardContent","Grid","container","spacing","item","Typography","variant","Button","href","target","disableElevation","useStyles","navContainer","maxWidth","margin","profileChip","stroke","profileLabel","listItem","flex","display","name","ScrollHeight","maxHeight","overflowX","badgeyellow","ProfileSection","useTheme","useSelector","state","React","useState","selectedIndex","open","setOpen","anchorRef","useRef","handleLogout","a","handleClose","event","current","contains","prevOpen","useEffect","focus","Chip","icon","Avatar","User1","ref","aria-controls","undefined","aria-haspopup","onClick","Popper","placement","anchorEl","role","disablePortal","popperOptions","modifiers","options","offset","TransitionProps","Fade","Paper","ClickAwayListener","onClickAway","Divider","justifyContent","List","ListItem","sx","selected","ListItemIcon","size","ListItemText","listAction","actionColor","sendIcon","notificationChip","listDivider","listChipError","listChipWarning","listChipSuccess","listAvatarSuccess","listAvatarPrimary","listContainer","uploadCard","cardAction","bodyspacing","textboxspacing","itemaction","boxContainer","withRouter","props","handleLeftDrawerToggle","el","history","push","appBar","MainLayout","children","CssBaseline","AppBar","Toolbar","clsx","IntroPage","lazy","PacmanGame","MainRoutes","location","useLocation","path","showBreadcrumb","pathname","MinimalLayout","NavMotion","motion","div","initial","animate","exit","variants","scale","in","out","type","ease","duration","AuthLogin","LoginRoutes","Loader","LinearProgress","AuthSamplePage","AuthenticationRoutes","Routes","AnimatePresence","fallback","exact","from","SlideLeft","Slide","SlideUp","SlideRight","SlideDown","Grow","Snackbar","snackbarInitial","snackbar","reason","action","anchorOrigin","autoHideDuration","onClose","message","TransitionComponent","IconButton","aria-label","Alert","severity","alertSeverity","bgcolor","actionButton","close","window","scrollTo","left","behavior","jss","create","plugins","jssPreset","rtl","cacheRtl","createCache","key","stylisPlugins","rtlPlugin","App","messages","setMessages","locale","then","d","document","querySelector","setAttribute","StylesProvider","defaultLocale","StyledEngineProvider","injectFirst","ThemeProvider","initialState","isOpen","opened","customizationReducer","actionTypes","vertical","horizontal","snackbarReducer","reducer","combineReducers","Boolean","hostname","match","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.620acc8d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"#fff\",\"paperDark\":\"#111936\",\"textPrimary\":\"#8492c4\",\"textSecondary\":\"#bdc8f0\",\"blue50\":\"#e3f2fd\",\"blue200\":\"#90caf9\",\"blue500\":\"#2196f3\",\"blue600\":\"#1e88e5\",\"blue800\":\"#1565c0\",\"A100\":\"#b9f6ca\",\"A200\":\"#69f0ae\",\"A700\":\"#00c853\",\"deepPurple50\":\"#ede7f6\",\"deepPurple200\":\"#b39ddb\",\"deepPurple500\":\"#673ab7\",\"deepPurple600\":\"#5e35b1\",\"deepPurple800\":\"#4527a0\",\"amber50\":\"#fff8e1\",\"amber100\":\"#ffe57f\",\"amber500\":\"#ffc107\",\"grey50\":\"#fafafa\",\"grey100\":\"#f5f5f5\",\"grey200\":\"#eee\",\"grey300\":\"#e0e0e0\",\"grey500\":\"#9e9e9e\",\"grey600\":\"#757575\",\"grey700\":\"#616161\",\"grey900\":\"#212121\",\"red200\":\"#ef9a9a\",\"red500\":\"#f44336\",\"red800\":\"#c62828\",\"deepOrange50\":\"#fbe9e7\",\"deepOrange200\":\"#ffab91\",\"deepOrange800\":\"#d84315\"};","import value from '../../assets/scss/_themes-vars.module.scss';\n\n/**\n * Color intention that you want to used in your theme\n */\nexport function themePalatte(navObject) {\n    return {\n        mode: navObject.customization.navType,\n        common: {\n            black: value.paperDark\n        },\n        primary: {\n            light: value.blue50,\n            main: value.blue500,\n            dark: value.blue600,\n            200: value.blue200,\n            800: value.blue800\n        },\n        secondary: {\n            light: value.deepPurple50,\n            main: value.deepPurple500,\n            dark: value.deepPurple600,\n            200: value.deepPurple200,\n            800: value.deepPurple800\n        },\n        purple: {\n            light: value.deepPurple50,\n            main: value.deepPurple500,\n            dark: value.deepPurple600,\n            200: value.deepPurple200,\n            800: value.deepPurple800\n        },\n        error: {\n            light: value.red200,\n            main: value.red500,\n            dark: value.red800\n        },\n        orange: {\n            light: value.deepOrange50,\n            main: value.deepOrange200,\n            dark: value.deepOrange800\n        },\n        warning: {\n            light: value.amber50,\n            main: value.amber100,\n            dark: value.amber500\n        },\n        success: {\n            light: value.A100,\n            main: value.A200,\n            dark: value.A700\n        },\n        grey: {\n            50: value.grey50,\n            100: value.grey100,\n            500: navObject.textSecondary,\n            600: navObject.textPrimary,\n            900: navObject.textDark\n        },\n        text: {\n            primary: navObject.textPrimary,\n            secondary: navObject.textSecondary,\n            dark: navObject.textDark,\n            hint: value.grey100\n        },\n        background: {\n            paper: navObject.paper,\n            default: navObject.backgroundDefault\n        }\n    };\n}\n","/**\n * Typography used in theme\n */\nexport function themeTypography(navObject) {\n    return {\n        fontFamily: navObject.customization.fontFamily,\n        h6: {\n            fontWeight: 500,\n            color: navObject.textDark,\n            fontSize: '0.75rem'\n        },\n        h5: {\n            fontSize: '0.875rem',\n            color: navObject.textDark,\n            fontWeight: 500\n        },\n        h4: {\n            fontSize: '1rem',\n            color: navObject.textDark,\n            fontWeight: 600\n        },\n        h3: {\n            fontSize: '1.25rem',\n            color: navObject.textDark,\n            fontWeight: 600\n        },\n        h2: {\n            fontSize: '1.5rem',\n            color: navObject.textDark,\n            fontWeight: 700\n        },\n        h1: {\n            fontSize: '2.125rem',\n            color: navObject.textDark,\n            fontWeight: 700\n        },\n        subtitle1: {\n            fontSize: '0.875rem',\n            fontWeight: 500,\n            color: navObject.textDark\n        },\n        subtitle2: {\n            fontSize: '0.75rem',\n            fontWeight: 400,\n            color: navObject.textSecondary\n        },\n        caption: {\n            fontSize: '0.75rem',\n            color: navObject.textSecondary,\n            fontWeight: 400\n        },\n        body1: {\n            fontSize: '0.875rem',\n            fontWeight: 400,\n            lineHeight: '1.334em'\n        },\n        body2: {\n            letterSpacing: '0em',\n            fontWeight: 400,\n            lineHeight: '1.5em',\n            color: navObject.textPrimary\n        },\n        mainContent: {\n            backgroundColor: navObject.background,\n            width: '100%',\n            minHeight: 'calc(100vh - 88px)',\n            flexGrow: 1,\n            padding: '20px',\n            marginTop: '88px',\n            marginRight: '20px',\n            borderRadius: navObject.customization.borderRadius + 'px'\n        },\n        menuCaption: {\n            fontSize: '0.875rem',\n            fontWeight: 500,\n            color: navObject.textDark,\n            padding: '6px',\n            textTransform: 'capitalize',\n            marginTop: '10px'\n        },\n        subMenuCaption: {\n            fontSize: '0.6875rem',\n            fontWeight: 500,\n            color: navObject.textSecondary,\n            textTransform: 'capitalize'\n        },\n        commonAvatar: {\n            cursor: 'pointer',\n            borderRadius: '8px'\n        },\n        smallAvatar: {\n            width: '22px',\n            height: '22px',\n            fontSize: '1rem'\n        },\n        mediumAvatar: {\n            width: '34px',\n            height: '34px',\n            fontSize: '1.2rem'\n        },\n        largeAvatar: {\n            width: '44px',\n            height: '44px',\n            fontSize: '1.5rem'\n        }\n    };\n}\n","import {createMuiTheme} from '@material-ui/core/styles';\nimport value from '../../assets/scss/_themes-vars.module.scss';\nimport {componentStyleOverrides} from './compStyleOverride';\nimport {themePalatte} from './palatte';\nimport {themeTypography} from './typography';\n\nexport function theme(customization) {\n    let navObject = {\n        paper: '',\n        backgroundDefault: '',\n        background: '',\n        textPrimary: '',\n        textSecondary: '',\n        textDark: '',\n        menuSelected: '',\n        menuSelectedBack: '',\n        divider: '',\n        customization: customization\n    };\n\n    switch (customization.navType) {\n        case 'light':\n        default:\n            navObject.paper = value.paper;\n            navObject.backgroundDefault = value.paper;\n            navObject.background = value.blue50;\n            navObject.textPrimary = value.grey700;\n            navObject.textSecondary = value.grey500;\n            navObject.textDark = value.grey900;\n            navObject.menuSelected = value.deepPurple600;\n            navObject.menuSelectedBack = value.blue50;\n            navObject.divider = value.grey200;\n            break;\n    }\n\n    return createMuiTheme({\n        direction: customization.rtlLayout ? 'rtl' : 'ltr',\n        palette: themePalatte(navObject),\n        mixins: {\n            toolbar: {\n                minHeight: '48px',\n                padding: '16px',\n                '@media (min-width: 600px)': {\n                    minHeight: '48px'\n                }\n            }\n        },\n        typography: themeTypography(navObject),\n        components: componentStyleOverrides(navObject)\n    });\n}\n\nexport default theme;\n","import value from '../../assets/scss/_themes-vars.module.scss';\n\n/**\n * MUI Componets whose styles are overrided as per theme\n */\nexport function componentStyleOverrides(theme) {\n    return {\n        MuiButton: {\n            styleOverrides: {\n                root: {\n                    fontWeight: 500,\n                    textTransform: 'capitalize',\n                    borderRadius: '4px'\n                }\n            }\n        },\n        MuiPaper: {\n            defaultProps: {\n                elevation: 0\n            },\n            styleOverrides: {\n                root: {\n                    backgroundImage: 'none'\n                },\n                rounded: {\n                    //border: '1px solid',\n                    borderRadius: theme.customization.borderRadius + 'px'\n                }\n            }\n        },\n        MuiCardHeader: {\n            styleOverrides: {\n                root: {\n                    color: value.textDark,\n                    padding: '24px'\n                },\n                title: {\n                    fontSize: '1.125rem'\n                }\n            }\n        },\n        MuiCardContent: {\n            styleOverrides: {\n                root: {\n                    padding: '24px'\n                }\n            }\n        },\n        MuiCardActions: {\n            styleOverrides: {\n                root: {\n                    padding: '24px'\n                }\n            }\n        },\n        MuiAlert: {\n            styleOverrides: {\n                root: {\n                    alignItems: 'center'\n                }\n            }\n        },\n        MuiButtonBase: {\n            styleOverrides: {\n                root: {\n                    '&.MuiListItem-root': {\n                        color: theme.textPrimary,\n                        paddingTop: '10px',\n                        paddingBottom: '10px',\n                        '&.Mui-selected': {\n                            color: theme.menuSelected,\n                            backgroundColor: theme.menuSelectedBack,\n                            '&:hover': {\n                                backgroundColor: theme.menuSelectedBack\n                            },\n                            '& .MuiListItemIcon-root': {\n                                color: theme.menuSelected\n                            }\n                        },\n                        '&:hover': {\n                            backgroundColor: theme.menuSelectedBack,\n                            color: theme.menuSelected,\n                            '& .MuiListItemIcon-root': {\n                                color: theme.menuSelected\n                            }\n                        }\n                    },\n                    '&.MuiOutlinedInput-root': {\n                        //borderRadius: customization.borderRadius + 'px'\n                    }\n                }\n            }\n        },\n        MuiListItemIcon: {\n            styleOverrides: {\n                root: {\n                    color: theme.textPrimary,\n                    minWidth: '36px'\n                }\n            }\n        },\n        MuiListItemText: {\n            styleOverrides: {\n                primary: {\n                    color: theme.textDark\n                }\n            }\n        },\n        MuiInputBase: {\n            styleOverrides: {\n                input: {\n                    color: theme.textDark,\n                    '&::placeholder': {\n                        color: theme.textSecondary,\n                        fontSize: '0.875rem'\n                    }\n                }\n            }\n        },\n        MuiOutlinedInput: {\n            styleOverrides: {\n                root: {\n                    background: value.grey50,\n                    borderRadius: theme.customization.borderRadius + 'px',\n                    '& .MuiOutlinedInput-notchedOutline': {\n                        borderColor: value.grey400\n                    },\n                    '&:hover $notchedOutline': {\n                        borderColor: value.blue50\n                    }\n                },\n                input: {\n                    background: value.grey50,\n                    padding: '15.5px 14px',\n                    fontWeight:500,\n                    borderRadius: theme.customization.borderRadius + 'px'\n                },\n                inputAdornedStart: {\n                    paddingLeft: 4\n                },\n                notchedOutline: {\n                    borderRadius: theme.customization.borderRadius + 'px'\n                }\n            }\n        },\n        MuiSlider: {\n            styleOverrides: {\n                root: {\n                    '&.Mui-disabled': {\n                        color: value.grey300\n                    }\n                },\n                mark: {\n                    backgroundColor: theme.paper,\n                    width: '4px'\n                }\n            }\n        },\n        MuiAutocomplete: {\n            styleOverrides: {\n                root: {\n                    '& .MuiAutocomplete-tag': {\n                        background: value.deepPurple50,\n                        borderRadius: 4,\n                        color: theme.textDark,\n                        '.MuiChip-deleteIcon': {\n                            color: value.deepPurple200\n                        }\n                    }\n                },\n                popper: {\n                    borderRadius: theme.customization.borderRadius + 'px',\n                    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)'\n                }\n            }\n        },\n        MuiDivider: {\n            styleOverrides: {\n                root: {\n                    borderColor: theme.divider,\n                    opacity: 1\n                }\n            }\n        },\n        MuiSelect: {\n            styleOverrides: {\n                select: {\n                    '&:focus': {\n                        backgroundColor: 'transparent'\n                    }\n                }\n            }\n        },\n        MuiCheckbox: {\n            styleOverrides: {\n                select: {\n                    fontSize: '28px'\n                }\n            },\n            MuiSvgIcon: {\n                styleOverrides: {\n                    select: {\n                        borderRadius: '6px',\n                        width: '1.2em',\n                        height: '1.2em'\n                    }\n                }\n            }\n        },\n        MuiAvatar: {\n            styleOverrides: {\n                root: {\n                    color: value.blue600,\n                    background: value.blue200\n                }\n            }\n        },\n        MuiChip: {\n            styleOverrides: {\n                root: {\n                    '&.MuiChip-deletable .MuiChip-deleteIcon': {\n                        color: 'inherit'\n                    }\n                }\n            }\n        },\n        MuiTimelineContent: {\n            styleOverrides: {\n                root: {\n                    color: theme.textDark,\n                    fontSize: '16px'\n                }\n            }\n        },\n        MuiTreeItem: {\n            styleOverrides: {\n                label: {\n                    marginTop: 8,\n                    marginBottom: 8\n                }\n            }\n        },\n        MuiTimelineDot: {\n            styleOverrides: {\n                root: {\n                    boxShadow: 'none'\n                }\n            }\n        },\n        MuiDateTimePickerTabs: {\n            styleOverrides: {\n                tabs: {\n                    backgroundColor: value.blue50,\n                    '& .MuiTabs-scroller': {\n                        '& .MuiTabs-flexContainer .MuiButtonBase-root.MuiTab-textColorPrimary': {\n                            color: theme.textDark,\n                            '&.Mui-selected': {\n                                color: value.blue600\n                            }\n                        },\n                        '& .MuiTabs-indicator': {\n                            backgroundColor: value.blue500\n                        }\n                    }\n                }\n            }\n        },\n        MuiClock: {\n            styleOverrides: {\n                root: {\n                    '& .MuiIconButton-root': {\n                        padding: '4px',\n                        bottom: '14px',\n                        '& .MuiIconButton-label .MuiTypography-root': {\n                            color: theme.textDark,\n                            fontSize: '0.625rem'\n                        },\n                        '&.MuiClock-meridiemButtonSelected': {\n                            backgroundColor: value.blue600,\n                            '& .MuiIconButton-label .MuiTypography-root': {\n                                color: theme.paper\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        MuiDialog: {\n            styleOverrides: {\n                paper: {\n                    padding: '12px 12px 12px 0'\n                }\n            }\n        }\n    };\n}\n","const config = {\n    // basename: only at build time to set, and don't add '/' at end off BASENAME for breadcrumbs,  like '/berry-material-react/react/default'\n    basename: '',\n    defaultPath: '/intro',\n    fontFamily: `'Roboto', sans-serif`,\n    borderRadius: 12,\n    theme: 'light',\n    i18n: 'en', // 'en' - English, 'fr' - French, 'ro' - Romanian, 'zh' - Chinese\n};\n\nexport default config;\n","export default __webpack_public_path__ + \"static/media/logo.0cdd96fa.svg\";","import React from 'react';\nimport {Link} from '@material-ui/core';\nimport {Link as RouterLink} from 'react-router-dom';\n\nimport config from './../../../config';\n\nimport logo from './../../../assets/images/logo.svg';\n\nconst LogoSection = () => {\n\n    return (\n        <React.Fragment>\n            <Link component={RouterLink} to={config.defaultPath}>\n                <img src={logo} alt=\"Berry\" width=\"100\" />\n            </Link>\n        </React.Fragment>\n    );\n};\n\nexport default LogoSection;\n","import React, {useState} from 'react';\nimport {\n    Avatar,\n    Box,\n    ButtonBase,\n    Card,\n    CardContent,\n    Fade,\n    Grid,\n    Hidden,\n    InputAdornment,\n    makeStyles,\n    OutlinedInput,\n    Popper\n} from '@material-ui/core';\nimport PopupState, {bindPopper, bindToggle} from 'material-ui-popup-state';\n\nimport {IconAdjustmentsHorizontal, IconSearch, IconX} from '@tabler/icons';\n\nconst useStyles = makeStyles((theme) => ({\n    searchControl: {\n        width: '434px',\n        marginLeft: '16px',\n        paddingRight: '16px',\n        paddingLeft: '16px',\n        '& input': {\n            background: 'transparent !important',\n            paddingLeft: '5px !important'\n        },\n        [theme.breakpoints.down('lg')]: {\n            width: '250px'\n        },\n        [theme.breakpoints.down('md')]: {\n            width: '100%',\n            marginLeft: '4px',\n            background: '#fff'\n        }\n    },\n    startAdornment: {\n        fontSize: '1rem',\n        color: theme.palette.grey[500]\n    },\n    headerAvtar: {\n        ...theme.typography.commonAvatar,\n        ...theme.typography.mediumAvatar,\n        background: theme.palette.purple.light,\n        color: theme.palette.purple.dark\n    },\n    colseAvtar: {\n        ...theme.typography.commonAvatar,\n        ...theme.typography.mediumAvatar,\n        background: theme.palette.orange.light,\n        color: theme.palette.orange.dark\n    },\n    popperContainer: {\n        zIndex: 1100,\n        width: '99%',\n        top: '-55px !important',\n        padding: '0 12px',\n        [theme.breakpoints.down('sm')]: {\n            padding: '0 10px'\n        }\n    },\n    cardContent: {\n        padding: '12px !important'\n    },\n    card: {\n        background: '#fff',\n        [theme.breakpoints.down('sm')]: {\n            border: 0,\n            boxShadow: 'none'\n        }\n    }\n}));\n\nconst SearchSection = () => {\n    const classes = useStyles();\n    const [value, setValue] = useState('');\n\n    return (\n        <React.Fragment>\n            <Hidden mdUp>\n                <PopupState variant=\"popper\" popupId=\"demo-popup-popper\">\n                    {(popupState) => (\n                        <React.Fragment>\n                            <Box ml={2}>\n                                <ButtonBase sx={{borderRadius: '12px'}}>\n                                    <Avatar variant=\"rounded\" className={classes.headerAvtar} {...bindToggle(popupState)}>\n                                        <IconSearch stroke={1.5} size=\"1.2rem\" />\n                                    </Avatar>\n                                </ButtonBase>\n                            </Box>\n                            <Popper {...bindPopper(popupState)} transition className={classes.popperContainer}>\n                                {({TransitionProps}) => (\n                                    <Fade {...TransitionProps} timeout={350}>\n                                        <Card className={classes.card}>\n                                            <CardContent className={classes.cardContent}>\n                                                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                                                    <Grid item xs>\n                                                        <OutlinedInput\n                                                            className={classes.searchControl}\n                                                            id=\"input-search-header\"\n                                                            value={value}\n                                                            onChange={(e) => setValue(e.target.value)}\n                                                            placeholder=\"Search\"\n                                                            startAdornment={\n                                                                <InputAdornment position=\"start\">\n                                                                    <IconSearch\n                                                                        stroke={1.5}\n                                                                        size=\"1rem\"\n                                                                        className={classes.startAdornment}\n                                                                    />\n                                                                </InputAdornment>\n                                                            }\n                                                            endAdornment={\n                                                                <InputAdornment position=\"end\">\n                                                                    <ButtonBase sx={{borderRadius: '12px'}}>\n                                                                        <Avatar variant=\"rounded\" className={classes.headerAvtar}>\n                                                                            <IconAdjustmentsHorizontal stroke={1.5} size=\"1.3rem\" />\n                                                                        </Avatar>\n                                                                    </ButtonBase>\n                                                                    <Box ml={2}>\n                                                                        <ButtonBase sx={{borderRadius: '12px'}}>\n                                                                            <Avatar\n                                                                                variant=\"rounded\"\n                                                                                className={classes.colseAvtar}\n                                                                                {...bindToggle(popupState)}\n                                                                            >\n                                                                                <IconX stroke={1.5} size=\"1.3rem\" />\n                                                                            </Avatar>\n                                                                        </ButtonBase>\n                                                                    </Box>\n                                                                </InputAdornment>\n                                                            }\n                                                            aria-describedby=\"search-helper-text\"\n                                                            inputProps={{\n                                                                'aria-label': 'weight'\n                                                            }}\n                                                            labelWidth={0}\n                                                        />\n                                                    </Grid>\n                                                </Grid>\n                                            </CardContent>\n                                        </Card>\n                                    </Fade>\n                                )}\n                            </Popper>\n                        </React.Fragment>\n                    )}\n                </PopupState>\n            </Hidden>\n            <Hidden mdDown>\n                <OutlinedInput\n                    className={classes.searchControl}\n                    id=\"input-search-header\"\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                    placeholder=\"Search\"\n                    startAdornment={\n                        <InputAdornment position=\"start\">\n                            <IconSearch stroke={1.5} size=\"1rem\" className={classes.startAdornment} />\n                        </InputAdornment>\n                    }\n                    endAdornment={\n                        <InputAdornment position=\"end\">\n                            <ButtonBase sx={{borderRadius: '12px'}}>\n                                <Avatar variant=\"rounded\" className={classes.headerAvtar}>\n                                    <IconAdjustmentsHorizontal stroke={1.5} size=\"1.3rem\" />\n                                </Avatar>\n                            </ButtonBase>\n                        </InputAdornment>\n                    }\n                    aria-describedby=\"search-helper-text\"\n                    inputProps={{\n                        'aria-label': 'weight'\n                    }}\n                    labelWidth={0}\n                />\n            </Hidden>\n        </React.Fragment>\n    );\n};\n\nexport default SearchSection;\n","export const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\nexport const ACCOUNT_INITIALISE = 'ACCOUNT_INITIALISE';\nexport const FIREBASE_STATE_CHANGED = 'FIREBASE_STATE_CHANGED';\nexport const SET_MENU = 'SET_MENU';\n\n// Action for Combine Reducer\nexport const MENU_OPEN = '@customization/MENU_OPEN';\nexport const MENU_TYPE = '@customization/MENU_TYPE';\nexport const THEME_LOCALE = '@customization/THEME_LOCALE';\nexport const THEME_RTL = '@customization/THEME_RTL';\nexport const SET_FONT_FAMILY = '@customization/SET_FONT_FAMILY';\nexport const SET_BORDER_RADIUS = '@customization/SET_BORDER_RADIUS';\n\nexport const SNACKBAR_OPEN = '@snackbar/SNACKBAR_OPEN';\n","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {\n    Avatar,\n    Drawer,\n    Fab,\n    FormControl,\n    FormControlLabel,\n    Grid,\n    makeStyles,\n    Radio,\n    RadioGroup,\n    Slider,\n    Tooltip,\n    Typography,\n    useTheme\n} from '@material-ui/core';\n\nimport SettingsSuggestIcon from '@material-ui/icons/SettingsSuggest';\n\nimport SubCard from '../../../../components/ui-component/cards/SubCard';\nimport {gridSpacing} from '../../../../store/constant';\nimport * as actionTypes from '../../../../store/actions';\n\nfunction valuetext(value) {\n    return `${value}px`;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    menuIcon: {\n        fontSize: '1.1rem'\n    },\n    headerAvtar: {\n        ...theme.typography.commonAvatar,\n        ...theme.typography.largeAvatar,\n        transition: 'all .2s ease-in-out',\n        background: theme.palette.primary.dark,\n        color: theme.palette.background.paper,\n        '&:hover': {\n            background: theme.palette.primary.main,\n            color: theme.palette.background.paper\n        }\n    },\n    box: {\n        marginLeft: '16px',\n        [theme.breakpoints.down('sm')]: {\n            marginLeft: '8px'\n        }\n    }\n}));\n\nconst Customization = () => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const customization = useSelector((state) => state.customization);\n    const dispatch = useDispatch();\n    const [open, setOpen] = React.useState(false);\n\n    const [borderRadius, setBorderRadius] = React.useState(customization.borderRadius);\n    const handleBorderRadius = (event, newValue) => {\n        setBorderRadius(newValue);\n    };\n\n    let initialFont;\n    switch (customization.fontFamily) {\n        case `'Inter', sans-serif`:\n            initialFont = 'Inter';\n            break;\n        case `'Poppins', sans-serif`:\n            initialFont = 'Poppins';\n            break;\n        case `'Roboto', sans-serif`:\n        default:\n            initialFont = 'Roboto';\n            break;\n    }\n\n    const [fontFamily, setFontFamily] = React.useState(initialFont);\n\n    const handleToggle = () => {\n        setOpen(!open);\n    };\n\n    if (customization.rtlLayout) {\n        document.querySelector('body').setAttribute('dir', 'rtl');\n    }\n\n    useEffect(() => {\n        dispatch({type: actionTypes.SET_BORDER_RADIUS, borderRadius: borderRadius});\n    }, [dispatch, borderRadius]);\n\n    useEffect(() => {\n        let newFont;\n        switch (fontFamily) {\n            case 'Inter':\n                newFont = `'Inter', sans-serif`;\n                break;\n            case 'Poppins':\n                newFont = `'Poppins', sans-serif`;\n                break;\n            case 'Roboto':\n            default:\n                newFont = `'Roboto', sans-serif`;\n                break;\n        }\n        dispatch({type: actionTypes.SET_FONT_FAMILY, fontFamily: newFont});\n    }, [dispatch, fontFamily]);\n\n    return (\n        <React.Fragment>\n            <Tooltip title=\"Live Customize\">\n                <Fab\n                    color=\"primary\"\n                    onClick={handleToggle}\n                    size=\"medium\"\n                    variant=\"string\"\n                    sx={{\n                        bottom: 0,\n                        margin: (theme) => theme.spacing(4),\n                        position: 'fixed',\n                        right: 20,\n                        zIndex: (theme) => theme.zIndex.speedDial,\n                        bgcolor: 'transparent',\n                        boxShadow: 'none',\n                        ':hover': {\n                            bgcolor: 'transparent',\n                            boxShadow: 'none'\n                        },\n                        [theme.breakpoints.down('sm')]: {\n                            display: 'none'\n                        }\n                    }}\n                >\n                    <Avatar\n                        variant=\"rounded\"\n                        className={classes.headerAvtar}\n                        onClick={handleToggle}\n                        sx={{boxShadow: '0 3px 10px 0 rgb(33 150 243)', ':hover': {boxShadow: '0 6px 15px 0 rgb(33 150 243)'}}}\n                    >\n                        <SettingsSuggestIcon />\n                    </Avatar>\n                </Fab>\n            </Tooltip>\n            <Drawer\n                anchor=\"right\"\n                onClose={handleToggle}\n                open={open}\n                PaperProps={{\n                    sx: {\n                        p: 3,\n                        width: 280\n                    }\n                }}\n            >\n                <Grid container spacing={gridSpacing}>\n                    <Grid item xs={12}>\n                        <SubCard title=\"Font Family\" darkTitle>\n                            <FormControl>\n                                <RadioGroup\n                                    aria-label=\"font-family\"\n                                    value={fontFamily}\n                                    onChange={(e) => setFontFamily(e.target.value)}\n                                    name=\"row-radio-buttons-group\"\n                                >\n                                    <FormControlLabel\n                                        value=\"Roboto\"\n                                        control={<Radio />}\n                                        label=\"Roboto\"\n                                        sx={{'& .MuiSvgIcon-root': {fontSize: 28}, '& .MuiFormControlLabel-label': {color: 'grey.900'}}}\n                                    />\n                                    <FormControlLabel\n                                        value=\"Poppins\"\n                                        control={<Radio />}\n                                        label=\"Poppins\"\n                                        sx={{'& .MuiSvgIcon-root': {fontSize: 28}, '& .MuiFormControlLabel-label': {color: 'grey.900'}}}\n                                    />\n                                    <FormControlLabel\n                                        value=\"Inter\"\n                                        control={<Radio />}\n                                        label=\"Inter\"\n                                        sx={{'& .MuiSvgIcon-root': {fontSize: 28}, '& .MuiFormControlLabel-label': {color: 'grey.900'}}}\n                                    />\n                                </RadioGroup>\n                            </FormControl>\n                        </SubCard>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <SubCard title=\"Border Radius\" darkTitle>\n                            <Grid item xs={12} container spacing={2} alignItems=\"center\" sx={{mt: 2.5}}>\n                                <Grid item>\n                                    <Typography variant=\"h6\" color=\"secondary\">\n                                        4px\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs>\n                                    <Slider\n                                        value={borderRadius}\n                                        onChange={handleBorderRadius}\n                                        getAriaValueText={valuetext}\n                                        valueLabelDisplay=\"on\"\n                                        aria-labelledby=\"discrete-slider-small-steps\"\n                                        marks\n                                        step={2}\n                                        min={4}\n                                        max={24}\n                                        color=\"secondary\"\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Typography variant=\"h6\" color=\"secondary\">\n                                        24px\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </SubCard>\n                    </Grid>\n                </Grid>\n            </Drawer>\n        </React.Fragment>\n    );\n};\n\nexport default Customization;\n","import React from 'react';\nimport {\n    AppBar,\n    Box,\n    ButtonBase,\n    ClickAwayListener,\n    Grid,\n    Grow,\n    makeStyles,\n    Paper,\n    Popper,\n    Toolbar,\n    useMediaQuery,\n    useTheme\n} from '@material-ui/core';\n\nimport Customization from '../Customization';\n\nimport {IconDotsVertical} from '@tabler/icons';\n\nconst useStyles = makeStyles((theme) => ({\n    grow: {\n        flexGrow: 1\n    },\n    paperContainer: {\n        [theme.breakpoints.down('sm')]: {\n            background: '#fff'\n        }\n    },\n    popperContainer: {\n        width: '100%',\n        zIndex: 1,\n        [theme.breakpoints.down('sm')]: {\n            top: '20px !important'\n        }\n    },\n    menuIcon: {\n        fontSize: '1.5rem',\n        marginLeft: '4px',\n        cursor: 'pointer'\n    },\n    toolbar: {\n        paddingTop: '22px',\n        paddingBottom: '22px'\n    }\n}));\n\nconst MobileSection = () => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const matchMobile = useMediaQuery(theme.breakpoints.down('mobile'));\n\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n        if (prevOpen.current === true && open === false) {\n            anchorRef.current.focus();\n        }\n\n        prevOpen.current = open;\n    }, [open]);\n\n    return (\n        <React.Fragment>\n            <Box component=\"span\" ref={anchorRef} mt={1} ml={1}>\n                <ButtonBase centerRipple>\n                    <IconDotsVertical\n                        stroke={1.5}\n                        aria-controls={open ? 'menu-list-grow' : undefined}\n                        aria-haspopup=\"true\"\n                        onClick={handleToggle}\n                        className={classes.menuIcon}\n                    />\n                </ButtonBase>\n            </Box>\n            <Popper\n                open={open}\n                placement=\"bottom-end\"\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n                className={classes.popperContainer}\n            >\n                {({TransitionProps, placement}) => (\n                    <Grow {...TransitionProps} in={open}>\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <div className={classes.grow}>\n                                    <AppBar color=\"inherit\" className={classes.paperContainer}>\n                                        <Toolbar className={classes.toolbar}>\n                                            <Grid container justifyContent={matchMobile ? 'space-between' : 'flex-end'} alignItems=\"center\">\n                                                <Customization />\n                                            </Grid>\n                                        </Toolbar>\n                                    </AppBar>\n                                </div>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Grow>\n                )}\n            </Popper>\n        </React.Fragment>\n    );\n};\n\nexport default MobileSection;\n","import React from 'react';\nimport {Button, Card, CardContent, Grid, makeStyles, Typography} from '@material-ui/core';\n\nconst rewardStyles = makeStyles((theme) => ({\n    card: {\n        background: theme.palette.warning.light,\n        marginTop: '16px',\n        marginBottom: '16px',\n        overflow: 'hidden',\n        position: 'relative',\n        '&:after': {\n            content: '\"\"',\n            position: 'absolute',\n            width: '200px',\n            height: '200px',\n            border: '19px solid ',\n            borderColor: theme.palette.warning.main,\n            borderRadius: '50%',\n            top: '65px',\n            right: '-150px'\n        },\n        '&:before': {\n            content: '\"\"',\n            position: 'absolute',\n            width: '200px',\n            height: '200px',\n            border: '3px solid ',\n            borderColor: theme.palette.warning.main,\n            borderRadius: '50%',\n            top: '145px',\n            right: '-70px'\n        }\n    },\n    tagLine: {\n        color: theme.palette.grey[900],\n        opacity: 0.6\n    },\n    button: {\n        color: theme.palette.grey[900],\n        backgroundColor: theme.palette.warning.dark,\n        textTransform: 'capitalize',\n        '&:hover': {\n            backgroundColor: theme.palette.warning.main\n        }\n    }\n}));\n\nconst RewardCard = () => {\n    const classes = rewardStyles();\n\n    return (\n        <Card className={classes.card}>\n            <CardContent>\n                <Grid container direction=\"column\" spacing={2}>\n                    <Grid item>\n                        <Typography variant=\"h4\">Claim your reward</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography variant=\"subtitle\" className={classes.tagLine}>\n                            Transfer <strong>$KHO</strong> tokens to your wallet.<br />\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Button variant=\"link\" href=\"https://berrydashboard.io\" target=\"_blank\" className={classes.button} disableElevation>\n                            Transfer to my wallet\n                        </Button>\n                    </Grid>\n                </Grid>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default RewardCard;\n","export default __webpack_public_path__ + \"static/media/user-round.13b5a31b.svg\";","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n    Avatar,\n    Card,\n    CardContent,\n    Chip,\n    ClickAwayListener,\n    Divider,\n    Fade,\n    Grid,\n    InputAdornment,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    makeStyles,\n    OutlinedInput,\n    Paper,\n    Popper,\n    Switch,\n    Typography,\n    useTheme\n} from '@material-ui/core';\n\nimport {IconLogout, IconSearch, IconSettings} from '@tabler/icons';\n\nimport RewardCard from './RewardCard';\n\nimport User1 from './../../../../assets/images/users/user-round.svg';\n\nconst useStyles = makeStyles((theme) => ({\n    navContainer: {\n        width: '100%',\n        maxWidth: '350px',\n        minWidth: '300px',\n        backgroundColor: theme.palette.background.paper,\n        borderRadius: '10px',\n        [theme.breakpoints.down('sm')]: {\n            minWidth: '100%'\n        }\n    },\n    headerAvtar: {\n        cursor: 'pointer',\n        ...theme.typography.mediumAvatar,\n        margin: '8px 0 8px 8px !important'\n    },\n    profileChip: {\n        height: '48px',\n        alignItems: 'center',\n        borderRadius: '27px',\n        transition: 'all .2s ease-in-out',\n        borderColor: theme.palette.primary.light,\n        backgroundColor: theme.palette.primary.light,\n        '&[aria-controls=\"menu-list-grow\"], &:hover': {\n            borderColor: theme.palette.primary.main,\n            background: theme.palette.primary.main + '!important',\n            color: theme.palette.primary.light,\n            '& svg': {\n                stroke: theme.palette.primary.light\n            }\n        }\n    },\n    profileLabel: {\n        lineHeight: 0,\n        padding: '12px'\n    },\n    listItem: {\n        marginTop: '5px'\n    },\n    cardContent: {\n        padding: '16px !important'\n    },\n    card: {\n        backgroundColor: theme.palette.primary.light,\n        marginBottom: '16px',\n        marginTop: '16px'\n    },\n    searchControl: {\n        width: '100%',\n        paddingRight: '8px',\n        paddingLeft: '16px',\n        marginBottom: '16px',\n        marginTop: '16px'\n    },\n    startAdornment: {\n        fontSize: '1rem',\n        color: theme.palette.grey[500]\n    },\n    flex: {\n        display: 'flex'\n    },\n    name: {\n        marginLeft: '2px',\n        fontWeight: 400\n    },\n    ScrollHeight: {\n        height: '100%',\n        maxHeight: 'calc(100vh - 250px)',\n        overflowX: 'hidden'\n    },\n    badgeyellow: {\n        backgroundColor: theme.palette.warning.dark,\n        color: '#fff'\n    }\n}));\n\nconst ProfileSection = () => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const customization = useSelector((state) => state.customization);\n    const [sdm, setSdm] = React.useState(true);\n    const [value, setValue] = React.useState('');\n    const [notification, setNotification] = React.useState(false);\n    const [selectedIndex] = React.useState(1);\n\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n    const handleLogout = async () => {\n        try {\n            //handleClose();\n            //await logout();\n        } catch (err) {\n            console.error(err);\n        }\n    };\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n        if (prevOpen.current === true && open === false) {\n            anchorRef.current.focus();\n        }\n\n        prevOpen.current = open;\n    }, [open]);\n    return (\n        <React.Fragment>\n            <Chip\n                classes={{label: classes.profileLabel}}\n                className={classes.profileChip}\n                icon={\n                    <Avatar\n                        src={User1}\n                        className={classes.headerAvtar}\n                        ref={anchorRef}\n                        aria-controls={open ? 'menu-list-grow' : undefined}\n                        aria-haspopup=\"true\"\n                        color=\"inherit\"\n                    />\n                }\n                label=\"Connected with 0x73...4A\"\n                // label={\"0x24423rewfdsaf\"  && <IconSettings stroke={1.5} size=\"1.5rem\" color={theme.palette.primary.main} />}\n                variant=\"outlined\"\n                ref={anchorRef}\n                aria-controls={open ? 'menu-list-grow' : undefined}\n                aria-haspopup=\"true\"\n                onClick={handleToggle}\n                color=\"primary\"\n            />\n            <Popper\n                placement=\"bottom-end\"\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n                popperOptions={{\n                    modifiers: [\n                        {\n                            name: 'offset',\n                            options: {\n                                offset: [100, 14]\n                            }\n                        }\n                    ]\n                }}\n            >\n                {({TransitionProps, placement}) => (\n                    <Fade {...TransitionProps}>\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <Card elevation={16}>\n                                    <CardContent className={classes.cardContent}>\n                                        <Grid container direction=\"column\" spacing={0}>\n                                            <Grid item className={classes.flex}>\n                                                <Typography variant=\"h4\">Good Morning,</Typography>\n                                                <Typography component=\"span\" variant=\"h4\" className={classes.name}>\n                                                    Kishan\n                                                </Typography>\n                                            </Grid>\n                                        </Grid>\n                                        <Divider />\n                                        <PerfectScrollbar className={classes.ScrollHeight}>\n                                            <RewardCard />\n                                            <Divider />\n                                            <Card className={classes.card}>\n                                                <CardContent>\n                                                    <Grid container direction=\"column\">\n                                                        <Grid item>\n                                                            <Grid item container alignItems=\"center\" justifyContent=\"space-between\">\n                                                                <Grid item>\n                                                                    <Typography variant=\"subtitle1\">$KHO balance</Typography>\n                                                                </Grid>\n                                                                <Grid item>\n                                                                    <p>124,129.00</p>\n                                                                </Grid>\n                                                            </Grid>\n                                                        </Grid>\n                                                        <Grid item>\n                                                            <Grid item container alignItems=\"center\" justifyContent=\"space-between\">\n                                                                <Grid item>\n                                                                    <Typography variant=\"subtitle1\">$Matic balance</Typography>\n                                                                </Grid>\n                                                                <Grid item>\n                                                                    <p>124,129.00</p>\n                                                                </Grid>\n                                                            </Grid>\n                                                        </Grid>\n                                                    </Grid>\n                                                </CardContent>\n                                            </Card>\n                                            <Divider />\n                                            <Card className={classes.card}>\n                                                <CardContent>\n                                                    <Grid container direction=\"column\" spacing={1}>\n                                                         <Grid item>\n                                                            <Grid item container alignItems=\"center\" justifyContent=\"space-between\">\n                                                                <Grid item>\n                                                                    <Typography variant=\"subtitle1\">Last transaction of $KHO.</Typography>\n                                                                </Grid>\n                                                            </Grid>\n                                                        </Grid>\n                                                        <Grid item>\n                                                            <Grid item container alignItems=\"center\" justifyContent=\"space-between\">\n                                                                <Grid item>\n                                                                    <Typography variant=\"subtitle1\">Amount</Typography>\n                                                                    <Typography variant=\"subtitle2\">From $KHO to your Address.</Typography>\n                                                                </Grid>\n                                                                <Grid item>\n                                                                    <p>124,129.00</p>\n                                                                </Grid>\n                                                            </Grid>\n                                                        </Grid>\n                                                        <Grid item>\n                                                            <Grid item container alignItems=\"center\" justifyContent=\"space-between\">\n                                                                <Grid item>\n                                                                    <Typography variant=\"subtitle1\">Tx address</Typography>\n                                                                    <Typography variant=\"subtitle2\">3 min ago.</Typography>\n                                                                </Grid>\n                                                                <Grid item>\n                                                                    <p>0x123kahsdfui23</p>\n                                                                </Grid>\n                                                            </Grid>\n                                                        </Grid>\n                                                    </Grid>\n                                                </CardContent>\n                                            </Card>\n                                            <Divider />\n                                            <List component=\"nav\" className={classes.navContainer}>\n                                                <ListItem\n                                                    className={classes.listItem}\n                                                    sx={{borderRadius: customization.borderRadius + 'px'}}\n                                                    button\n                                                    selected={selectedIndex === 4}\n                                                    onClick={handleLogout}\n                                                >\n                                                    <ListItemIcon>\n                                                        <IconLogout stroke={1.5} size=\"1.3rem\" />\n                                                    </ListItemIcon>\n                                                    <ListItemText primary={<Typography variant=\"body2\">Logout</Typography>} />\n                                                </ListItem>\n                                            </List>\n                                        </PerfectScrollbar>\n                                    </CardContent>\n                                </Card>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Fade>\n                )}\n            </Popper>\n        </React.Fragment>\n    );\n};\n\nexport default ProfileSection;\n","import React from 'react';\nimport {Avatar, Button, ButtonBase, Hidden, makeStyles} from '@material-ui/core';\n\nimport {Link, withRouter\n} from \"react-router-dom\";\n\nimport {IconMenu2} from '@tabler/icons';\n\nimport LogoSection from '../LogoSection';\nimport SearchSection from './SearchSection';\n\nimport Customization from './Customization';\n\nimport MobileSection from './MobileSection';\n\nimport ProfileSection from './ProfileSection';\nimport NotificationSection from './NotificationSection';\n\nconst useStyles = makeStyles((theme) => ({\n    grow: {\n        flexGrow: 1\n    },\n    headerAvtar: {\n        ...theme.typography.commonAvatar,\n        ...theme.typography.mediumAvatar,\n        transition: 'all .2s ease-in-out',\n        background: theme.palette.primary.light,\n        color: theme.palette.purple.dark,\n        '&:hover': {\n            background: theme.palette.purple.main,\n            color: theme.palette.purple.light\n        }\n    },\n    boxContainer: {\n        width: '350px',\n        display: 'flex',\n        // [theme.breakpoints.down('md')]: {\n        //     width: 'auto'\n        // }\n    }\n}));\n\nconst Header = (props) => {\n    const {handleLeftDrawerToggle} = props;\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            <div className={classes.boxContainer}>\n                {/* <Hidden mdDown>\n                    <LogoSection />\n                    <div className={classes.grow} />\n                </Hidden> */}\n                <LogoSection />\n                <div className={classes.grow} />\n                <Button variant=\"outlined\">Whitepaper</Button>\n                <div className={classes.grow} />\n                <Button variant=\"outlined\" onClick={(el)=>{\n                    props.history.push('/pacman');\n                }}>\n                Live Games\n                </Button>\n               \n                {/* <ButtonBase sx={{borderRadius: '12px'}}>\n                    <Avatar variant=\"rounded\" className={classes.headerAvtar} onClick={handleLeftDrawerToggle}>\n                        <IconMenu2 stroke={1.5} size=\"1.3rem\" />\n                    </Avatar>\n                </ButtonBase> */}\n            </div>\n            {/* <SearchSection theme=\"light\" /> */}\n            <div className={classes.grow} />\n            <div className={classes.grow} />\n            \n            {/* <Hidden smDown>\n                <Customization />\n            </Hidden> */}\n\n            {/* <NotificationSection /> */}\n            <ProfileSection />\n            {/* <Hidden smUp>\n                <MobileSection />\n            </Hidden> */}\n        </React.Fragment>\n    );\n};\n\nexport default withRouter(Header);\n","import React from 'react';\n\nimport {\n    Avatar,\n    Box,\n    Button,\n    ButtonBase,\n    Card,\n    CardActions,\n    CardContent,\n    Chip,\n    ClickAwayListener,\n    Divider,\n    Fade,\n    Grid,\n    Link,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Paper,\n    Popper,\n    Stack,\n    TextField,\n    Typography,\n    useMediaQuery,\n    useTheme\n} from '@material-ui/core';\n\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n\nimport {IconBell, IconBrandTelegram, IconBuildingStore, IconMailbox, IconPhoto} from '@tabler/icons';\nimport User1 from './../../../../assets/images/users/user-round.svg';\n\nconst useStyles = makeStyles((theme) => ({\n    navContainer: {\n        width: '100%',\n        maxWidth: '330px',\n        paddingTop: 0,\n        paddingBottom: 0,\n        borderRadius: '10px',\n        [theme.breakpoints.down('sm')]: {\n            maxWidth: '300px'\n            //maxWidth: '100%'\n        }\n    },\n    listAction: {\n        top: '22px'\n    },\n    actionColor: {\n        color: theme.palette.grey[500]\n    },\n    ScrollHeight: {\n        height: '100%',\n        maxHeight: 'calc(100vh - 205px)',\n        overflowX: 'hidden'\n    },\n    listItem: {\n        padding: 0\n    },\n    sendIcon: {\n        marginLeft: '8px',\n        marginTop: '-3px'\n    },\n    headerAvtar: {\n        ...theme.typography.commonAvatar,\n        ...theme.typography.mediumAvatar,\n        transition: 'all .2s ease-in-out',\n        background: theme.palette.purple.light,\n        color: theme.palette.purple.dark,\n        '&[aria-controls=\"menu-list-grow\"],&:hover': {\n            background: theme.palette.purple.main,\n            color: theme.palette.purple.light\n        }\n    },\n    cardContent: {\n        padding: '0px !important'\n    },\n    notificationChip: {\n        color: '#fff',\n        backgroundColor: theme.palette.warning.dark\n    },\n    divider: {\n        marginTop: 0,\n        marginBottom: 0\n    },\n    listDivider: {\n        marginTop: 0,\n        marginBottom: 0\n    },\n    listChipError: {\n        color: theme.palette.orange.dark,\n        backgroundColor: theme.palette.orange.light,\n        height: '24px',\n        padding: '0 6px',\n        marginRight: '5px'\n    },\n    listChipWarning: {\n        color: theme.palette.warning.dark,\n        backgroundColor: theme.palette.warning.light,\n        height: '24px',\n        padding: '0 6px'\n    },\n    listChipSuccess: {\n        color: theme.palette.success.dark,\n        backgroundColor: theme.palette.success.light,\n        height: '24px',\n        padding: '0 6px'\n    },\n    listAvatarSuccess: {\n        color: theme.palette.success.dark,\n        backgroundColor: theme.palette.success.light,\n        border: 'none',\n        borderColor: theme.palette.success.main\n    },\n    listAvatarPrimary: {\n        color: theme.palette.primary.dark,\n        backgroundColor: theme.palette.primary.light,\n        border: 'none',\n        borderColor: theme.palette.primary.main\n    },\n    listContainer: {\n        paddingLeft: '56px'\n    },\n    uploadCard: {\n        backgroundColor: theme.palette.purple.light\n    },\n    cardAction: {\n        padding: '10px',\n        justifyContent: 'center'\n    },\n    paddingBottom: {\n        paddingBottom: '16px'\n    },\n    box: {\n        marginLeft: '16px',\n        marginRight: '24px',\n        [theme.breakpoints.down('sm')]: {\n            marginRight: '16px'\n        }\n    },\n    bodyspacing: {\n        padding: '16px 16px 0'\n    },\n    textboxspacing: {\n        padding: '0px 16px'\n    },\n    itemaction: {\n        cursor: 'pointer',\n        padding: '16px',\n        '&:hover': {\n            background: theme.palette.primary.light\n        }\n    }\n    // notificationpoper: {\n    //     [theme.breakpoints.down('sm')]: {\n    //         maxWidth: '100% ',\n    //         //transform: 'none !important',\n    //         top: '100% !important',\n    //         left: '0px',\n    //         right: '0px'\n    //     }\n    // }\n}));\n\nconst status = [\n    {\n        value: 'all',\n        label: 'All Notification'\n    },\n    {\n        value: 'new',\n        label: 'New'\n    },\n    {\n        value: 'unread',\n        label: 'Unread'\n    },\n    {\n        value: 'other',\n        label: 'Other'\n    }\n];\n\nconst NotificationSection = () => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const matchesXs = useMediaQuery(theme.breakpoints.down('sm'));\n\n    const [open, setOpen] = React.useState(false);\n    const [value, setValue] = React.useState('');\n    const anchorRef = React.useRef(null);\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n        setOpen(false);\n    };\n\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n        if (prevOpen.current === true && open === false) {\n            anchorRef.current.focus();\n        }\n        prevOpen.current = open;\n    }, [open]);\n\n    const handleChange = (event) => {\n        setValue(event.target.value);\n    };\n\n    return (\n        <React.Fragment>\n            <Box component=\"span\" className={classes.box}>\n                <ButtonBase sx={{borderRadius: '12px'}}>\n                    <Avatar\n                        variant=\"rounded\"\n                        className={classes.headerAvtar}\n                        ref={anchorRef}\n                        aria-controls={open ? 'menu-list-grow' : undefined}\n                        aria-haspopup=\"true\"\n                        onClick={handleToggle}\n                        color=\"inherit\"\n                    >\n                        <IconBell stroke={1.5} size=\"1.3rem\" />\n                    </Avatar>\n                </ButtonBase>\n            </Box>\n            <Popper\n                placement={matchesXs ? 'bottom' : 'bottom-end'}\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n                className={classes.notificationpoper}\n                popperOptions={{\n                    modifiers: [\n                        {\n                            name: 'offset',\n                            options: {\n                                offset: [matchesXs ? 5 : 0, 20]\n                            }\n                        }\n                    ]\n                }}\n            >\n                {({TransitionProps, placement}) => (\n                    <Fade {...TransitionProps}>\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <Card elevation={16}>\n                                    <CardContent className={classes.cardContent}>\n                                        <Grid container direction=\"column\" spacing={2}>\n                                            <Grid item xs={12}>\n                                                <div className={classes.bodyspacing}>\n                                                    <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                                                        <Grid item>\n                                                            <Stack direction=\"row\" spacing={2}>\n                                                                <Typography variant=\"subtitle1\">All Notification</Typography>\n                                                                <Chip size=\"small\" label=\"01\" className={classes.notificationChip} />\n                                                            </Stack>\n                                                        </Grid>\n                                                        <Grid item>\n                                                            <Link href=\"#\">\n                                                                <Typography variant=\"subtitle2\" color=\"primary\">\n                                                                    Mark as all read\n                                                                </Typography>\n                                                            </Link>\n                                                        </Grid>\n                                                    </Grid>\n                                                </div>\n                                            </Grid>\n                                            <Grid item xs={12}>\n                                                <PerfectScrollbar className={classes.ScrollHeight}>\n                                                    <Grid container direction=\"column\" spacing={2}>\n                                                        <Grid item xs={12}>\n                                                            <div className={classes.textboxspacing}>\n                                                                <TextField\n                                                                    id=\"outlined-select-currency-native\"\n                                                                    select\n                                                                    fullWidth\n                                                                    value={value}\n                                                                    onChange={handleChange}\n                                                                    SelectProps={{\n                                                                        native: true\n                                                                    }}\n                                                                    variant=\"outlined\"\n                                                                >\n                                                                    {status.map((option) => (\n                                                                        <option key={option.value} value={option.value}>\n                                                                            {option.label}\n                                                                        </option>\n                                                                    ))}\n                                                                </TextField>\n                                                            </div>\n                                                        </Grid>\n                                                        <Grid item xs={12} p={0}>\n                                                            <Divider className={classes.divider} />\n                                                        </Grid>\n                                                        <Grid item xs={12}>\n                                                            <List className={classes.navContainer}>\n                                                                <div className={classes.itemaction}>\n                                                                    <ListItem alignItems=\"center\" className={classes.listItem}>\n                                                                        <ListItemAvatar>\n                                                                            <Avatar alt=\"John Doe\" src={User1} />\n                                                                        </ListItemAvatar>\n                                                                        <ListItemText\n                                                                            primary={\n                                                                                <Typography variant=\"subtitle1\">Kishan Pandav</Typography>\n                                                                            }\n                                                                        />\n                                                                        <ListItemSecondaryAction className={classes.listAction}>\n                                                                            <Grid container justifyContent=\"flex-end\">\n                                                                                <Grid item xs={12}>\n                                                                                    <Typography\n                                                                                        variant=\"caption\"\n                                                                                        display=\"block\"\n                                                                                        gutterBottom\n                                                                                        className={classes.actionColor}\n                                                                                    >\n                                                                                        2 min ago\n                                                                                    </Typography>\n                                                                                </Grid>\n                                                                            </Grid>\n                                                                        </ListItemSecondaryAction>\n                                                                    </ListItem>\n                                                                    <Grid container direction=\"column\" className={classes.listContainer}>\n                                                                        <Grid item xs={12} className={classes.paddingBottom}>\n                                                                            <Typography variant=\"subtitle2\">\n                                                                                It is a long established fact that a reader will be\n                                                                                distracted\n                                                                            </Typography>\n                                                                        </Grid>\n                                                                        <Grid item xs={12}>\n                                                                            <Grid container>\n                                                                                <Grid item>\n                                                                                    <Chip\n                                                                                        label=\"Unread\"\n                                                                                        className={classes.listChipError}\n                                                                                    />\n                                                                                </Grid>\n                                                                                <Grid item>\n                                                                                    <Chip label=\"New\" className={classes.listChipWarning} />\n                                                                                </Grid>\n                                                                            </Grid>\n                                                                        </Grid>\n                                                                    </Grid>\n                                                                </div>\n                                                                <Divider className={classes.listDivider} />\n                                                                <div className={classes.itemaction}>\n                                                                    <ListItem alignItems=\"center\" className={classes.listItem}>\n                                                                        <ListItemAvatar>\n                                                                            <Avatar className={classes.listAvatarSuccess}>\n                                                                                <IconBuildingStore stroke={1.5} size=\"1.3rem\" />\n                                                                            </Avatar>\n                                                                        </ListItemAvatar>\n                                                                        <ListItemText\n                                                                            primary={\n                                                                                <Typography variant=\"subtitle1\">\n                                                                                    Store Verification Done\n                                                                                </Typography>\n                                                                            }\n                                                                        />\n                                                                        <ListItemSecondaryAction className={classes.listAction}>\n                                                                            <Grid container justifyContent=\"flex-end\">\n                                                                                <Grid item xs={12}>\n                                                                                    <Typography\n                                                                                        variant=\"caption\"\n                                                                                        display=\"block\"\n                                                                                        gutterBottom\n                                                                                        className={classes.actionColor}\n                                                                                    >\n                                                                                        2 min ago\n                                                                                    </Typography>\n                                                                                </Grid>\n                                                                            </Grid>\n                                                                        </ListItemSecondaryAction>\n                                                                    </ListItem>\n                                                                    <Grid container direction=\"column\" className={classes.listContainer}>\n                                                                        <Grid item xs={12} className={classes.paddingBottom}>\n                                                                            <Typography variant=\"subtitle2\">\n                                                                                We have sucessfully recieved your request.\n                                                                            </Typography>\n                                                                        </Grid>\n                                                                        <Grid item xs={12}>\n                                                                            <Grid container>\n                                                                                <Grid item>\n                                                                                    <Chip\n                                                                                        label=\"Unread\"\n                                                                                        className={classes.listChipError}\n                                                                                    />\n                                                                                </Grid>\n                                                                            </Grid>\n                                                                        </Grid>\n                                                                    </Grid>\n                                                                </div>\n                                                                <Divider className={classes.listDivider} />\n                                                                <div className={classes.itemaction}>\n                                                                    <ListItem alignItems=\"center\" className={classes.listItem}>\n                                                                        <ListItemAvatar>\n                                                                            <Avatar className={classes.listAvatarPrimary}>\n                                                                                <IconMailbox stroke={1.5} size=\"1.3rem\" />\n                                                                            </Avatar>\n                                                                        </ListItemAvatar>\n                                                                        <ListItemText\n                                                                            primary={\n                                                                                <Typography variant=\"subtitle1\">\n                                                                                    Check Your Mail.\n                                                                                </Typography>\n                                                                            }\n                                                                        />\n                                                                        <ListItemSecondaryAction className={classes.listAction}>\n                                                                            <Grid container justifyContent=\"flex-end\">\n                                                                                <Grid item>\n                                                                                    <Typography\n                                                                                        variant=\"caption\"\n                                                                                        display=\"block\"\n                                                                                        gutterBottom\n                                                                                        className={classes.actionColor}\n                                                                                    >\n                                                                                        2 min ago\n                                                                                    </Typography>\n                                                                                </Grid>\n                                                                            </Grid>\n                                                                        </ListItemSecondaryAction>\n                                                                    </ListItem>\n                                                                    <Grid container direction=\"column\" className={classes.listContainer}>\n                                                                        <Grid item xs={12} className={classes.paddingBottom}>\n                                                                            <Typography variant=\"subtitle2\">\n                                                                                All done! Now check your inbox as you're in for a sweet\n                                                                                treat!\n                                                                            </Typography>\n                                                                        </Grid>\n                                                                        <Grid item xs={12}>\n                                                                            <Grid container>\n                                                                                <Grid item>\n                                                                                    <Button\n                                                                                        variant=\"contained\"\n                                                                                        color=\"primary\"\n                                                                                        disableElevation\n                                                                                    >\n                                                                                        Mail\n                                                                                        <IconBrandTelegram\n                                                                                            stroke={1.5}\n                                                                                            size=\"1.3rem\"\n                                                                                            className={classes.sendIcon}\n                                                                                        />\n                                                                                    </Button>\n                                                                                </Grid>\n                                                                            </Grid>\n                                                                        </Grid>\n                                                                    </Grid>\n                                                                </div>\n                                                                <Divider className={classes.listDivider} />\n                                                                <div className={classes.itemaction}>\n                                                                    <ListItem alignItems=\"center\" className={classes.listItem}>\n                                                                        <ListItemAvatar>\n                                                                            <Avatar alt=\"Jone Doe\" src={User1} />\n                                                                        </ListItemAvatar>\n                                                                        <ListItemText\n                                                                            primary={<Typography variant=\"subtitle1\">Jone Doe</Typography>}\n                                                                        />\n                                                                        <ListItemSecondaryAction className={classes.listAction}>\n                                                                            <Grid container justifyContent=\"flex-end\">\n                                                                                <Grid item xs={12}>\n                                                                                    <Typography\n                                                                                        variant=\"caption\"\n                                                                                        display=\"block\"\n                                                                                        gutterBottom\n                                                                                        className={classes.actionColor}\n                                                                                    >\n                                                                                        2 min ago\n                                                                                    </Typography>\n                                                                                </Grid>\n                                                                            </Grid>\n                                                                        </ListItemSecondaryAction>\n                                                                    </ListItem>\n                                                                    <Grid container direction=\"column\" className={classes.listContainer}>\n                                                                        <Grid item xs={12} className={classes.paddingBottom}>\n                                                                            <Typography component=\"span\" variant=\"subtitle2\">\n                                                                                Uploaded two file on &nbsp;\n                                                                                <Typography component=\"span\" variant=\"h6\">\n                                                                                    21 Jan 2020\n                                                                                </Typography>\n                                                                            </Typography>\n                                                                        </Grid>\n                                                                        <Grid item xs={12}>\n                                                                            <Grid container>\n                                                                                <Grid item xs={12}>\n                                                                                    <Card className={classes.uploadCard}>\n                                                                                        <CardContent>\n                                                                                            <Grid container direction=\"column\">\n                                                                                                <Grid item xs={12}>\n                                                                                                    <Stack direction=\"row\" spacing={2}>\n                                                                                                        <IconPhoto\n                                                                                                            stroke={1.5}\n                                                                                                            size=\"1.3rem\"\n                                                                                                        />\n                                                                                                        <Typography variant=\"subtitle1\">\n                                                                                                            demo.jpg\n                                                                                                        </Typography>\n                                                                                                    </Stack>\n                                                                                                </Grid>\n                                                                                            </Grid>\n                                                                                        </CardContent>\n                                                                                    </Card>\n                                                                                </Grid>\n                                                                            </Grid>\n                                                                        </Grid>\n                                                                    </Grid>\n                                                                </div>\n                                                                <Divider className={classes.listDivider} />\n                                                                <div className={classes.itemaction}>\n                                                                    <ListItem alignItems=\"center\" className={classes.listItem}>\n                                                                        <ListItemAvatar>\n                                                                            <Avatar alt=\"Jone Doe\" src={User1} />\n                                                                        </ListItemAvatar>\n                                                                        <ListItemText\n                                                                            primary={<Typography variant=\"subtitle1\">Jone Doe</Typography>}\n                                                                        />\n                                                                        <ListItemSecondaryAction className={classes.listAction}>\n                                                                            <Grid container justifyContent=\"flex-end\">\n                                                                                <Grid item xs={12}>\n                                                                                    <Typography\n                                                                                        variant=\"caption\"\n                                                                                        display=\"block\"\n                                                                                        gutterBottom\n                                                                                        className={classes.actionColor}\n                                                                                    >\n                                                                                        2 min ago\n                                                                                    </Typography>\n                                                                                </Grid>\n                                                                            </Grid>\n                                                                        </ListItemSecondaryAction>\n                                                                    </ListItem>\n                                                                    <Grid container direction=\"column\" className={classes.listContainer}>\n                                                                        <Grid item xs={12} className={classes.paddingBottom}>\n                                                                            <Typography variant=\"subtitle2\">\n                                                                                It is a long established fact that a reader will be\n                                                                                distracted\n                                                                            </Typography>\n                                                                        </Grid>\n                                                                        <Grid item xs={12}>\n                                                                            <Grid container>\n                                                                                <Grid item>\n                                                                                    <Chip\n                                                                                        label=\"Confirmation of Account.\"\n                                                                                        className={classes.listChipSuccess}\n                                                                                    />\n                                                                                </Grid>\n                                                                            </Grid>\n                                                                        </Grid>\n                                                                    </Grid>\n                                                                </div>\n                                                            </List>\n                                                        </Grid>\n                                                    </Grid>\n                                                </PerfectScrollbar>\n                                            </Grid>\n                                        </Grid>\n                                    </CardContent>\n                                    <Divider />\n                                    <CardActions className={classes.cardAction}>\n                                        <Button size=\"small\" color=\"primary\" disableElevation>\n                                            View All\n                                        </Button>\n                                    </CardActions>\n                                </Card>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Fade>\n                )}\n            </Popper>\n        </React.Fragment>\n    );\n};\n\nexport default NotificationSection;\n","import React from 'react';\nimport clsx from 'clsx';\nimport {AppBar, CssBaseline, makeStyles, Toolbar, useMediaQuery, useTheme} from '@material-ui/core';\n\nimport Header from './Header';\n\nconst navigation = {items:[]};\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex'\n    },\n    appBar: {\n        backgroundColor: theme.palette.background.default\n    },\n    content: {\n        ...theme.typography.mainContent,\n        marginLeft: '20px',\n        padding: '16px',\n    },\n}));\n\nconst MainLayout = ({children}) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" color=\"inherit\" elevation={0} className={classes.appBar}>\n                <Toolbar>\n                    <Header/>\n                </Toolbar>\n            </AppBar>\n            <main\n                className={clsx([\n                    classes.content,\n                   \n                ])}\n            >\n                <div>{children}</div>\n            </main>\n        </div>\n    );\n};\n\nexport default MainLayout;\n","import React, {lazy} from 'react';\nimport {Route, Switch, useLocation} from 'react-router-dom';\n\nimport MainLayout from './../layout/MainLayout';\n\nconst IntroPage = lazy(() => import('../views/intro-page'));\nconst PacmanGame = lazy(() => import('../games/pacman-game'));\n\nconst MainRoutes = () => {\n    const location = useLocation();\n\n    return (\n        <Route\n            path={[\n                '/intro',\n                '/pacman'\n            ]}\n        >\n            <MainLayout showBreadcrumb={true}>\n                <Switch location={location} key={location.pathname}>\n                    <Route path=\"/intro\" component={IntroPage} />\n                    <Route path=\"/pacman\" component={PacmanGame} />\n                </Switch>\n            </MainLayout>\n        </Route>\n    );\n};\n\nexport default MainRoutes;\n","const MinimalLayout = (props) => {\n    return props.children;\n};\n\nexport default MinimalLayout;\n","import React from 'react';\nimport {motion} from 'framer-motion';\n\nconst NavMotion = ({children}) => {\n    const motionVariants = {\n        initial: {\n            opacity: 0,\n            scale: 0.99\n        },\n        in: {\n            opacity: 1,\n            scale: 1\n        },\n        out: {\n            opacity: 0,\n            scale: 1.01\n        }\n    };\n\n    const motionTransition = {\n        type: 'tween',\n        ease: 'anticipate',\n        duration: 0.4\n    };\n\n    return (\n        <motion.div initial=\"initial\" animate=\"in\" exit=\"out\" variants={motionVariants} transition={motionTransition}>\n            {children}\n        </motion.div>\n    );\n};\n\nexport default NavMotion;\n","import React, {lazy} from 'react';\nimport {Route, Switch, useLocation} from 'react-router-dom';\nimport MinimalLayout from '../layout/MinimalLayout';\nimport NavMotion from '../layout/NavMotion';\n\n\nconst AuthLogin = lazy(() => import('../views/sample-page'));\n\nconst LoginRoutes = () => {\n    const location = useLocation();\n\n    return (\n        <Route path={['/login']}>\n            <MinimalLayout>\n                <Switch location={location} key={location.pathname}>\n                    <NavMotion>\n                        <Route path=\"/login\" component={AuthLogin} />\n                    </NavMotion>\n                </Switch>\n            </MinimalLayout>\n        </Route>\n    );\n};\n\nexport default LoginRoutes;\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\n\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2)\n        }\n    }\n}));\n\nconst Loader = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <LinearProgress color=\"primary\" />\n        </div>\n    );\n};\n\nexport default Loader;\n","import React, {lazy} from 'react';\nimport {Route, Switch, useLocation} from 'react-router-dom';\nimport MinimalLayout from './../layout/MinimalLayout';\n\n// login option 3\nconst AuthSamplePage = lazy(() => import('../views/sample-page'));\n\n\nconst AuthenticationRoutes = () => {\n    const location = useLocation();\n\n    return (\n        <Route\n            path={[\n                '/pages/market-place'\n            ]}\n        >\n            <MinimalLayout>\n                <Switch location={location} key={location.pathname}>\n                    <Route path=\"/pages/market-place\" component={AuthSamplePage} />\n                </Switch>\n            </MinimalLayout>\n        </Route>\n    );\n};\n\nexport default AuthenticationRoutes;\n","import React, {Suspense} from 'react';\nimport {Redirect, Switch} from 'react-router-dom';\nimport {AnimatePresence} from 'framer-motion';\n\nimport config from './../config';\nimport MainRoutes from './MainRoutes';\nimport LoginRoutes from './LoginRoutes';\n\nimport Loader from '../components/ui-component/extended/Loader/Loader';\n\nimport AuthenticationRoutes from './AuthenticationRoutes';\n\nconst Routes = () => {\n    return (\n        <AnimatePresence>\n            <Suspense fallback={<Loader />}>\n                <Switch>\n                    <Redirect exact from=\"/\" to={config.defaultPath} />\n                    <>\n                        {/* Routes for authetication pages */}\n                        <AuthenticationRoutes />\n\n                        {/* Route for login */}\n                        <LoginRoutes />\n\n                        {/* Routes for main layouts */}\n                        <MainRoutes />\n                    </>\n                </Switch>\n            </Suspense>\n        </AnimatePresence>\n    );\n};\n\nexport default Routes;\n","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {Alert, Button, Fade, Grow, IconButton, Slide} from '@material-ui/core';\nimport MuiSnackbar from '@material-ui/core/Snackbar';\n\nimport CloseIcon from '@material-ui/icons/Close';\n\nfunction TransitionSlideLeft(props) {\n    return <Slide {...props} direction=\"left\" />;\n}\n\nfunction TransitionSlideUp(props) {\n    return <Slide {...props} direction=\"up\" />;\n}\n\nfunction TransitionSlideRight(props) {\n    return <Slide {...props} direction=\"right\" />;\n}\n\nfunction TransitionSlideDown(props) {\n    return <Slide {...props} direction=\"down\" />;\n}\n\nfunction GrowTransition(props) {\n    return <Grow {...props} />;\n}\n\nconst transition = {\n    SlideLeft: TransitionSlideLeft,\n    SlideUp: TransitionSlideUp,\n    SlideRight: TransitionSlideRight,\n    SlideDown: TransitionSlideDown,\n    Grow: GrowTransition,\n    Fade: Fade\n};\n\nconst Snackbar = (props) => {\n    const [open, setOpen] = React.useState(false);\n    const snackbarInitial = useSelector((state) => state.snackbar);\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpen(false);\n    };\n\n    React.useEffect(() => {\n        setOpen(snackbarInitial.open);\n    }, [snackbarInitial.action, snackbarInitial.open]);\n\n    return (\n        <React.Fragment>\n            {snackbarInitial.variant === 'default' && (\n                <MuiSnackbar\n                    anchorOrigin={snackbarInitial.anchorOrigin}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message={snackbarInitial.message}\n                    TransitionComponent={transition[snackbarInitial.transition]}\n                    action={\n                        <React.Fragment>\n                            <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n                                UNDO\n                            </Button>\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" />\n                            </IconButton>\n                        </React.Fragment>\n                    }\n                />\n            )}\n            {snackbarInitial.variant === 'alert' && (\n                <MuiSnackbar\n                    TransitionComponent={transition[snackbarInitial.transition]}\n                    anchorOrigin={snackbarInitial.anchorOrigin}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                >\n                    <Alert\n                        variant=\"filled\"\n                        severity={snackbarInitial.alertSeverity}\n                        sx={{\n                            bgcolor: snackbarInitial.alertSeverity + '.dark',\n                            color: snackbarInitial.alertSeverity === 'warning' ? 'grey.900' : ''\n                        }}\n                        action={\n                            <React.Fragment>\n                                {snackbarInitial.actionButton !== false && (\n                                    <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n                                        UNDO\n                                    </Button>\n                                )}\n                                {snackbarInitial.close !== false && (\n                                    <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                        <CloseIcon fontSize=\"small\" />\n                                    </IconButton>\n                                )}\n                            </React.Fragment>\n                        }\n                    >\n                        {snackbarInitial.message}\n                    </Alert>\n                </MuiSnackbar>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default Snackbar;\n","import {useEffect} from 'react';\nimport {withRouter} from 'react-router-dom';\n\nconst NavigationScroll = ({children, location: {pathname}}) => {\n    useEffect(() => {\n        window.scrollTo({\n            top: 0,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }, [pathname]);\n\n    return children || null;\n};\n\nexport default withRouter(NavigationScroll);\n","import React, {useEffect, useState} from 'react';\nimport {useSelector} from 'react-redux';\nimport {IntlProvider} from 'react-intl';\nimport {jssPreset, StylesProvider, ThemeProvider} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport StyledEngineProvider from '@material-ui/core/StyledEngineProvider';\n\n\nimport theme from './components/themes';\nimport Routes from './routes';\nimport Snackbar from './components/ui-component/extended/Snackbar';\nimport NavigationScroll from './layout/NavigationScroll';\n\nimport rtlPlugin from 'stylis-plugin-rtl';\nimport {CacheProvider} from '@emotion/react';\nimport createCache from '@emotion/cache';\n\nimport {create} from 'jss';\nimport rtl from 'jss-rtl';\n\nconst jss = create({\n    plugins: [...jssPreset().plugins, rtl()]\n});\n\nconst cacheRtl = createCache({\n    key: 'muirtl',\n    stylisPlugins: [rtlPlugin]\n});\n\nconst loadLocaleData = (locale) => {\n    switch (locale) {\n        default:\n            return import('./utils/locals/en.json');\n    }\n};\n\nconst App = () => {\n    const customization = useSelector((state) => state.customization);\n    const [messages, setMessages] = useState();\n\n    useEffect(() => {\n        loadLocaleData(customization.locale).then((d) => {\n            setMessages(d.default);\n        });\n    }, [customization]);\n\n    if (customization.rtlLayout) {\n        document.querySelector('body').setAttribute('dir', 'rtl');\n    }\n\n    return (\n        <React.Fragment>\n            <StylesProvider jss={jss}>\n                <CacheProvider value={cacheRtl}>\n                    {messages && (\n                        <IntlProvider locale={customization.locale} defaultLocale=\"en\" messages={messages}>\n                            <StyledEngineProvider injectFirst>\n                                <NavigationScroll>\n                                    <ThemeProvider theme={theme(customization)}>\n                                        <CssBaseline />\n                                            <Routes />\n                                            <Snackbar />\n                                    </ThemeProvider>\n                                </NavigationScroll>\n                            </StyledEngineProvider>\n                        </IntlProvider>\n                    )}\n                </CacheProvider>\n            </StylesProvider>\n        </React.Fragment>\n    );\n};\n\nexport default App;\n","import * as actionTypes from './actions';\nimport config from '../config';\n\nexport const initialState = {\n    isOpen: 'dashboard', //for active default menu\n    fontFamily: config.fontFamily,\n    borderRadius: config.borderRadius,\n    navType: config.theme,\n    locale: config.i18n,\n    rtlLayout: false, // rtlLayout: config.rtlLayout,\n    opened: true\n};\n\nconst customizationReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.MENU_OPEN:\n            return {\n                ...state,\n                isOpen: action.isOpen\n            };\n        case actionTypes.MENU_TYPE:\n            return {\n                ...state,\n                navType: action.navType\n            };\n        case actionTypes.THEME_LOCALE:\n            return {\n                ...state,\n                locale: action.locale\n            };\n        case actionTypes.THEME_RTL:\n            return {\n                ...state,\n                rtlLayout: action.rtlLayout\n            };\n        case actionTypes.SET_MENU:\n            return {\n                ...state,\n                opened: action.opened\n            };\n        case actionTypes.SET_FONT_FAMILY:\n            return {\n                ...state,\n                fontFamily: action.fontFamily\n            };\n        case actionTypes.SET_BORDER_RADIUS:\n            return {\n                ...state,\n                borderRadius: action.borderRadius\n            };\n        default:\n            return state;\n    }\n};\n\nexport default customizationReducer;\n","import * as actionTypes from './actions';\n\nconst initialState = {\n    action: false,\n    open: false,\n    message: 'Note archived',\n    anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n    },\n    variant: 'default',\n    alertSeverity: 'success',\n    transition: 'Fade',\n    close: true,\n    actionButton: false\n};\n\nconst snackbarReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SNACKBAR_OPEN:\n            return {\n                ...state,\n                action: !state.action,\n                open: action.open ? action.open : initialState.open,\n                message: action.message ? action.message : initialState.message,\n                anchorOrigin: action.anchorOrigin ? action.anchorOrigin : initialState.anchorOrigin,\n                variant: action.variant ? action.variant : initialState.variant,\n                alertSeverity: action.alertSeverity ? action.alertSeverity : initialState.alertSeverity,\n                transition: action.transition ? action.transition : initialState.transition,\n                close: action.close === false ? action.close : initialState.close,\n                actionButton: action.actionButton ? action.actionButton : initialState.actionButton\n            };\n        default:\n            return state;\n    }\n};\n\nexport default snackbarReducer;\n","import {combineReducers} from 'redux';\nimport customizationReducer from './customizationReducer';\nimport snackbarReducer from './snackbarReducer';\n\nconst reducer = combineReducers({\n    customization: customizationReducer,\n    snackbar: snackbarReducer\n});\n\nexport default reducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\n\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\n\nimport App from './App';\nimport reducer from './store/reducer';\nimport config from './config';\nimport './assets/scss/style.scss';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={config.basename}>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}